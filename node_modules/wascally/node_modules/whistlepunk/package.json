{
  "name": "whistlepunk",
  "version": "0.2.0",
  "homepage": "https://github.com/LeanKit-Labs/whistlepunk",
  "description": "Logging abstraction that signals any enabled adapters of a new log message.",
  "author": {
    "name": "LeanKit"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/LeanKit-Labs/whistlepunk.git"
  },
  "contributors": [
    {
      "name": "Jim Cowart",
      "email": "jim@ifandelse.com",
      "url": "http://ifandelse.com"
    },
    {
      "name": "Alex Robson",
      "email": "WhyNotJustComment@OnMyBlog.com",
      "url": "http://nerdventure.io/"
    },
    {
      "name": "Brian Edgerton",
      "url": "https://github.com/brianedgerton"
    }
  ],
  "keywords": [
    "logging",
    "log",
    "bunyan",
    "debug"
  ],
  "scripts": {
    "test": "mocha ./spec/**/*.spec.js -R spec",
    "coverage": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -x 'spec/**/*'  -- -r spec/helpers/node-setup.js spec spec/*.spec.js",
    "show-coverage": "open ./coverage/lcov-report/index.html"
  },
  "dependencies": {
    "colors": "1.0.3",
    "debug": "2.1.1",
    "lodash": "2.4.1",
    "machina": "1.0.0-1",
    "moment": "2.9.0",
    "when": "3.6.4"
  },
  "devDependencies": {
    "gulp": "^3.8.11",
    "gulp-istanbul": "^0.6.0",
    "gulp-jshint": "^1.9.2",
    "gulp-mocha": "^2.0.0",
    "istanbul": "~0.3.2",
    "jshint-stylish": "^1.0.0",
    "mocha": "~2.1.0",
    "open": "0.0.5",
    "postal": "~0.12.3",
    "should": "~4.6.1",
    "sinon": "^1.12.2"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "main": "src/index.js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "files": [
    "src",
    "LICENSE"
  ],
  "readme": "#Whistlepunk\n\n> *noun* - a lumberjack who operates the signal wire running to a donkey engine whistle.\n\n##What Is It?\nLogging.....sigh. It's necessary, but often intrusive, heavy-handed and cumbersome...or it's anemic and fails to satisfy the needs of Ops and Developers. Whistlepunk doesn't care about what logging tools you love to use. It just cares that it needs to \"blow the whistle\" (i.e. - indicate something should be logged). You can plug your favorite logging tool into whistlepunk by writing an adapter for it (which consists of susbcribing to the postal \"log\" channel and writing the published log messages to your preferred logging library). At LeanKit, we're using [debug]() a lot (during development) and then standard out for production logs - so whistlepunk has two adapters (currently) built-in.\n\n##How Does it Work?\nIf whistlepunk knows about your adapter, then including a section for that adapter in your configuration will enable it. For example, this config enables the \"stdOut\" and \"debug\" built-in adapters:\n\n```javascript\nvar config =  {\n\tadapters: {\n\t\tstdOut: {\n\t\t\tlevel: 5,\n\t\t\tbailIfDebug: true // disables stdOut if DEBUG=* is in play\n\t\t},\n\t\t\"debug\": {\n\t\t\tlevel: 5\n\t\t}\n\t}\n};\nvar postal = require(\"postal\");\nvar logger = require(\"whistlepunk\")(postal, config);\n\nlogger.warn(\"Watch it, I'm warning you!\");\n```\n\n###Log Levels\nThe log levels available are specified as integers (as in the above `level` value under each adapter's configuration). Specifying a log level includes each level up to the level specified. For example, specifying a log level of \"3\" (info), will include warn (2) and error (1) log messages as well.\n\n* 0 - off\n* 1 - error\n* 2 - warn\n* 3 - info\n* 4 - debug\n\n###Using With autohost\nIt's possible to use autohost to emit log messages over websockets to a client. To do so, you need to ensure autohost is registered with its fount instances as \"ah\", and pass the autohost fount instance to whistlepunk:\n\n```javascript\nvar config =  {\n\tadapters: {\n\t\tstdOut: {\n\t\t\tlevel: 5,\n\t\t\tbailIfDebug: true // disables stdOut if DEBUG=* is in play\n\t\t},\n\t\t\"debug\": {\n\t\t\tlevel: 5\n\t\t},\n\t\tautohost: {\n\t\t\tlevel: 5\n\t\t}\n\t}\n};\n// assuming autohost instance is assigned to a \"host\" variable\nvar logger = require(\"whistlepunk\")(postal, config, host.fount);\n\nlogger.debug(\"More info than you'd typically want to sift through....\");\n```\n\n###Custom Adapters\nWhistlepunk adapters modules must meet the following criteria:\n\n * export a factory method that takes the adapter config\n * provide an onLog method it can call on entries\n * implement a singleton (requiring it multiple times should result in the same instance)\n\nOptionally, your adapter module can:\n\n * provide an init method that returns a promise for asynchronous setup\n * provide a `constraint` predicate that filters log entries (one is provided by default that filters by level)\n * accept a fount instance as a second argument to the factory method\n\n#### Debug adapter - synchronous example\n```js\nvar debug = require( \"debug\" );\nvar namespaces = {};\nvar debugAdapter = {\n\tonLog: function( data ) {\n\t\tvar debugNs = namespaces[ data.namespace ];\n\t\tif ( !debugNs ) {\n\t\t\tdebugNs = namespaces[ data.namespace ] = debug( data.namespace );\n\t\t}\n\t\tdebugNs( data.type, data.msg );\n\t}\n};\n\n// factory method returns the same instance every time\n// this allows whistlepunk to prevent creating duplicate subscriptions\n// which would cause duplicate log entries\nmodule.exports = function( config ) {\n\treturn debugAdapter;\n};\n```\n\n#### Autohost Socket adapter - asynchronous example\n```js\nvar noOpAdapter = { onLog: function() {} };\nvar adapter;\n\nfunction createAhAdapter( fount ) {\n\tvar host;\n\n\treturn {\n\t\t// whistlepunk will call this when present\n\t\t// and cache log messages for this adapter\n\t\t// until the promise resolves\n\t\tinit: function() {\n\t\t\treturn fount.resolve( \"ah\" )\n\t\t\t\t.then( function( _host ) {\n\t\t\t\t\thost = _host;\n\t\t\t\t} );\n\t\t},\n\t\tonLog: function( data ) {\n\t\t\tif ( host && host.notifyClients ) {\n\t\t\t\thost.notifyClients( data.type, data );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// because need fount to get a handle to the\n// autohost instance, return a no-op adapter\n// if it's missing\nmodule.exports = function( config, fount ) {\n\tadapter = adapter || ( fount ? createAhAdapter( fount ) : noOpAdapter );\n\treturn adapter;\n};\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/LeanKit-Labs/whistlepunk/issues"
  },
  "_id": "whistlepunk@0.2.0",
  "dist": {
    "shasum": "9ef84ae5ae845e6870ea4505a8b257bac808b940"
  },
  "_from": "whistlepunk@0.2.0",
  "_resolved": "https://registry.npmjs.org/whistlepunk/-/whistlepunk-0.2.0.tgz"
}
