{
  "name": "flatten-prototypes",
  "version": "3.0.0",
  "description": "Flatten out an objects prototypes into a single flat object",
  "keywords": [],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/uber/flatten-prototypes.git"
  },
  "main": "index",
  "homepage": "https://github.com/uber/flatten-prototypes",
  "bugs": {
    "url": "https://github.com/uber/flatten-prototypes/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "deep-extend": "^0.2.11",
    "deep-merge": "~0.3.1"
  },
  "devDependencies": {
    "difflet": "~0.2.6",
    "istanbul": "~0.1.46",
    "jshint": "^2.5.6",
    "mocha": "~1.15.1",
    "pd": "~0.1.0"
  },
  "scripts": {
    "test": "npm run jshint && mocha --reporter tap ./test 2>&1 | tee ./test/test.js.tap",
    "jshint": "jshint --verbose --exclude-path .gitignore --config jshint.json .",
    "cover": "istanbul cover --report none --print detail _mocha",
    "view-cover": "istanbul report html && open ./coverage/index.html"
  },
  "engine": {
    "node": ">= 0.8.x"
  },
  "readme": "# flatten-prototypes\n\nFlatten out an objects prototypes into a single flat object\n\n## Example\n\n```js\nvar flattenPrototypes = require(\"flatten-prototypes\");\n\nvar foo = { hello: 'foo', deep: { one: true } }\nvar bar = { woop: 'leep' }\nvar baz = { world: 'baz', deep: { two: true } }\n\nfoo.__proto__ = bar\nbar.__proto__ = baz\n\nvar obj = flattenPrototypes(foo)\nobj.hello // foo\nobj.woop // leep\nobj.world // baz\nobj.deep // { one: true, two: true }\nObject.keys(obj); // ['hello', 'woop', 'world', 'deep']\n```\n\n## Docs\n\n### `flattenPrototypes(object) => object`\n\n`flattenPrototypes` takes an object with a non trivial prototype\n    chain and will return you a plain object with no prototypes\n    which has all the properties of the original object and it's\n    prototypes.\n\nThis is like `Object.getOwnPropertyNames` except it get's all\n    the property names not just it's \"own\" ones and then returns\n    a new plain object with those properties where the values\n    are either the value of the property or a deep merging of\n    the values of the properties if multiple of the prototypes\n    have the same key.\n\nBasically if you were using prototypes to share data across\n    multiple objects and you wanted to be able to get a flat plain\n    object of the current state you can call `flattenPrototypes`\n\n```js\nvar Blueprint = {\n    hands: 2,\n    feet: 2,\n    legs: 2,\n    arms: 2\n}\n\nvar Spider = {\n    legs: 8,\n    feet: 8,\n    hands: 0,\n    arms: 0\n}\nSpider.__proto__ = Blueprint\n\nvar Dog = {\n    arms: 0,\n    feet: 4,\n    legs: 4,\n    hands: 0\n}\nDog.__proto__ = Blueprint\n\nvar Shepherd = {\n    fluffy: true\n}\nShepherd.__proto__ = Dog\n\nvar Pug = {\n    curledTail: true\n}\nPug.__proto__ = Dog\n\nvar myPug = {\n    name: \"Puggy pug pug\"\n}\nMyPug.__proto__ = Pug\n\n// to get the properties of `MyPug` we can flatten its prototypes\nvar props = flattenPrototypes(myPug)\n// this now is a plain object with own properties which means\n// we can serialize and print it\nconsole.log(JSON.stringify(props))\n```\n\n## Installation\n\n`npm install flatten-prototypes`\n\n## Tests\n\n`npm test`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n",
  "readmeFilename": "README.md",
  "_id": "flatten-prototypes@3.0.0",
  "dist": {
    "shasum": "dbc04ca5b6d3673f971964147e5f372d840472ee"
  },
  "_from": "flatten-prototypes@^3.0.0",
  "_resolved": "https://registry.npmjs.org/flatten-prototypes/-/flatten-prototypes-3.0.0.tgz"
}
